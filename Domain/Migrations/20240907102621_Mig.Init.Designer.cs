// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ExamDbContext))]
    [Migration("20240907102621_Mig.Init")]
    partial class MigInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.ToTable("tbCustomers", "mis");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("FkInvoiceDetialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.HasIndex("FkInvoiceDetialId");

                    b.HasIndex("FkInvoiceId");

                    b.ToTable("tbDiscounts", "fin");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FkCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkSellLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvStatus")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.HasIndex("FkCustomerId");

                    b.HasIndex("FkSellLineId");

                    b.HasIndex("FkSellerId");

                    b.ToTable("tbInvoices", "fin");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FkInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.HasIndex("FkInvoiceId");

                    b.HasIndex("FkProductId");

                    b.ToTable("tbInvoiceDetails", "fin");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PkId");

                    b.ToTable("tbProducts", "shp");
                });

            modelBuilder.Entity("Domain.Entities.SellLine", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PkId");

                    b.ToTable("tbSellLines", "shp");
                });

            modelBuilder.Entity("Domain.Entities.SellLineProduct", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FkProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkSellLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkSellLineId");

                    b.ToTable("tbSellLineProducts", "shp");
                });

            modelBuilder.Entity("Domain.Entities.SellLineSeller", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FkSellLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.HasIndex("FkSellLineId");

                    b.HasIndex("FkSellerId");

                    b.ToTable("tbSellLineSellers", "shp");
                });

            modelBuilder.Entity("Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PkId");

                    b.ToTable("tbSellers", "mis");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.HasOne("Domain.Entities.InvoiceDetail", "InvoiceDetail")
                        .WithMany()
                        .HasForeignKey("FkInvoiceDetialId");

                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("Discounts")
                        .HasForeignKey("FkInvoiceId");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceDetail");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("FkCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SellLine", "SellLine")
                        .WithMany()
                        .HasForeignKey("FkSellLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("FkSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SellLine");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("FkInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.SellLineProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SellLine", "SellLine")
                        .WithMany()
                        .HasForeignKey("FkSellLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SellLine");
                });

            modelBuilder.Entity("Domain.Entities.SellLineSeller", b =>
                {
                    b.HasOne("Domain.Entities.SellLine", "SellLine")
                        .WithMany()
                        .HasForeignKey("FkSellLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("FkSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellLine");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
